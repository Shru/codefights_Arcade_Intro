// Definition for arrays:
// typedef struct arr_##name {
//   int size;
//   type *arr;
// } arr_##name;
//
// arr_##name alloc_arr_##name(int len) {
//   arr_##name a = {len, len > 0 ? malloc(sizeof(type) * len) : NULL};
//   return a;
// }
//
//
arr_string addBorder(arr_string picture) {
    int column = strlen(picture.arr[0])+2+1; //To be terminated by NULL character. Not counted by strlen
    int row = picture.size+2;
    arr_string picwb = alloc_arr_string(row);
    int i = 0;
    int j = 0;

   for (i=0; i<row; i++){
        picwb.arr[i] = malloc(sizeof(char)*column);
        for (j=0; j<column-1; j++){
            if ((i == 0)||(i == row-1)||(j == 0)||(j == column-2)) {
                picwb.arr[i][j] = '*';
            }
            else {
                picwb.arr[i][j] = picture.arr[i-1][j-1];
            }
        }
       if (j == (column-1)) picwb.arr[i][j] = '\0';
    }
    return picwb; 
}
