char *reverseSet(char *s, int low, int up){
    char temp;
    int i = low;
    int j = up;
    while (i < j){
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
        i++;
        j--;
    }
    i = low;
    j = i+1;
    while (i < strlen(s)-2){
        if (j != up){
            s[i] = s[j]; 
            i++;
            j++;
        }
        else {
            j++;
        }
    }
    s[strlen(s)-2] = '\0';
    //s[strlen(s)-1] = '\0';
    return s;
}

char * reverseParentheses(char * s) {
    int i = 0;
    int up, low;
    int count = 0;
    while (i < strlen(s)){
        if (s[i] == '('){
            low = i;
            count++;
        }
        if (s[i] == ')'){
            up = i;
            break;
        }
        i++;
    }
    //printf("%d,%d,%d",low,up,count);
    while (count > 0){
        count = 0;
        s = reverseSet(s,low,up);
        i = 0;
        while (i < strlen(s)){
        if (s[i] == '('){
            low = i;
            count++;
        }
        if (s[i] == ')'){
            up = i;
            break;
        }
        i++;
        }
        
    }
    return s;
}
